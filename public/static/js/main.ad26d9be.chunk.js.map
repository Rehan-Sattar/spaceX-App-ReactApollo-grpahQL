{"version":3,"sources":["components/LaunchItem.js","components/MissionStatus.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-warning","text-danger","dist_default","format","Link","to","concat","MissionStatus","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","err","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","text-success","client","ApolloClient","uri","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad26d9be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Moment from \"react-moment\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LaunchItem({\r\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\r\n}) {\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>\r\n            Mission :{\" \"}\r\n            <span\r\n              className={classNames({\r\n                \"text-warning\": launch_success,\r\n                \"text-danger\": !launch_success\r\n              })}\r\n            >\r\n              {mission_name}\r\n            </span>{\" \"}\r\n          </h4>\r\n          <p>\r\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n          </p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <Link to={`/launch/${flight_number}`}  className=\"btn btn-secondary\">Launch Details</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function MissionStatus() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-warning\" /> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport LaunchItem from \"./LaunchItem\";\r\nimport MissionStatus from \"./MissionStatus\";\r\nconst LAUNCHES_QUERY = gql`\r\n  {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\nexport default class Launches extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h3>Launches</h3>\r\n        <MissionStatus />\r\n        <Query query={LAUNCHES_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <h2>Loading...</h2>;\r\n            if (error) console.log(`ERROR: ${error}`);\r\n            console.log(\"data: \", data);\r\n\r\n            return (\r\n              <Fragment> \r\n                {data.launches.map(launch => (\r\n                  <LaunchItem key={launch.flight_number} launch={launch} />\r\n                ))}\r\n              </Fragment>\r\n            );\r\n          }}\r\n        </Query>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query launchQuery($flight_number: Int!) {\r\n    launch(flight_number : $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local,\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport default class Launch extends Component {\r\n\r\n  render() {\r\n    // getting the flight number from route props.\r\n    let { flight_number } = this.props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n\r\n    return (\r\n      <div>\r\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n          {\r\n            ({ loading, err, data }) => {\r\n              if (loading) return <h1>loading...</h1>\r\n              if (err) console.log(err);\r\n              const {\r\n                flight_number,\r\n                mission_name,\r\n                launch_year,\r\n                launch_success,\r\n                launch_date_local,\r\n                rocket: {\r\n                  rocket_id,\r\n                  rocket_name,\r\n                  rocket_type\r\n                }\r\n              } = data.launch;\r\n              return (\r\n                <div>\r\n                  <h1 className=\"display-4 my-3\">Mission Name: <span className=\"text-dark\">{mission_name}</span></h1>\r\n                  <h4 className=\"mb-3\">Luanch Details</h4>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">\r\n                      Flight Number: {flight_number}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                      Launch Year: {launch_year}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                      Launch Success: <span className={classNames({\r\n                        'text-success': launch_success,\r\n                        'text-danger': !launch_success\r\n                      })}>\r\n                        {launch_success ? 'Yes' : 'No'}\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                  <h4 className=\"my-3\">Rocket Details</h4>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">\r\n                      Rocket id: {rocket_id}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                      Rocket Name: {rocket_name}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                      Rocket Type: {rocket_type}\r\n                    </li>\r\n                  </ul>\r\n                  <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n                </div>\r\n              );\r\n            }\r\n          }\r\n        </Query>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport \"./App.css\";\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <h3>SpaceX</h3>\n            <Route exact path=\"/\" component={Launches} />\n            <Route path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}